@import "library.js"
@import "html.js"

const linkedLayerKey = "link"
const fixedLayerKey  = "fix"
const fixedPositions = ['top', 'right', 'bottom', 'left']

const htmlConfigName = "HTML_Config"


/**
    COMMAND
    Export to HTML  
  */

var exportToHtml = function(context) {
  
  const sketch = context.api()
  const doc = sketch.selectedDocument
  const docName = [(doc.sketchObject) displayName]
  const page = doc.selectedPage

  // open the system dialog to choose the export location
  const fileURL = fileSaver();
  const exportPath = fileURL.path() + '/' + docName + '_HTML/'
  createFolder(exportPath);

  var html = ''
  var linkTargets = []
  var hiddenLayers = []
  var artboardsList = getArtboardsList (doc)

  var artboards = (doc.sketchObject).currentPage().artboards().objectEnumerator()

  while (artboard = artboards.nextObject()) {

    var artboardName = artboard.name().trim()
    var artboardId = artboard.objectID()
    var artboardW = artboard.frame().width()

    // start the HTML string
    html = HTML_HEAD + '<!-- ' + artboardName + ' -->\n'
    html += '<img class="artboardImage" src="img/' + artboardName + '.png" width="'+ artboardW +'">\n'

    var config = getConfigObject (sketch, page)
    var artboardConfig = config[artboardId]
    if (artboardConfig) {
      var layersIds = Object.keys(artboardConfig)

      for (var layerId of layersIds) {
        var layer = doc.layerWithID(layerId)
        if (!layer) break
        var layerObj = layer.sketchObject
        
        var layerConfig = artboardConfig[layerId]
        if (!layerConfig) break
        if ( Object.keys(layerConfig).length > 1 ) { // layer if both fixed and linked
          
          var linkTarget = layerConfig[linkedLayerKey]
          var position = layerConfig[fixedLayerKey]

          html += getFixedAndLinkedLayerHtml(layerObj, linkTarget, position)
          var filePath = exportPath + "img/" + layerId + ".png"
          exportLayerToPath((doc.sketchObject), layerObj, filePath)
          //hide layer until the artboard is exported
          [layerObj setIsVisible:false]
          hiddenLayers.push(layerObj)

        } else {
          for (var htmlType of Object.keys(layerConfig)) {

            var htmlValue = layerConfig[htmlType]

            switch(htmlType) {

              case linkedLayerKey:
                linkTargets.push(htmlValue)
                var position = getPosition(layer, artboardConfig)
                html += getLinkedLayerHtml(layerObj, htmlValue, position)
                break

              case fixedLayerKey:
                html += getFixedLayerHtml(layerObj, htmlValue)
                var filePath = exportPath + "img/" + layerId + ".png"
                exportLayerToPath((doc.sketchObject), layerObj, filePath)
                //hide layer until the artboard is exported
                [layerObj setIsVisible:false]
                hiddenLayers.push(layerObj)
                break
            }
          }
        }
      }
    }

    html += HTML_FOOT;

    var htmlPath = exportPath + artboardName + '.html'
    saveTextToFile(htmlPath, html);

    // export this artboard
    var filePath = exportPath + "img/" + artboardName + ".png"
    exportLayerToPath((doc.sketchObject), artboard, filePath)

    // show fixed layers
    for (var i = 0; i < hiddenLayers.length; i++) {
      [(hiddenLayers[i]) setIsVisible:true]
    }
    hiddenLayers = []
    
  }

  // display list of dead links, if any
  displayMissingArtboardsWarnings(sketch, linkTargets, artboardsList);

  // display a toaster message
  sketch.message('HTML files exported to: ' + exportPath)

  openFolder(exportPath);
}



/**
    COMMAND
    Link fixed layer to...  
  */

var setLinkedLayer = function(context) {
  const sketch = context.api()
  const doc = sketch.selectedDocument
  const page = doc.selectedPage

  var selection = doc.selectedLayers

  var config = getConfigObject(sketch, page)

  if (selection.isEmpty) {
    sketch.message('Select a layer first')
    return false
  }

  var artboardsList = getArtboardsList (doc)

  // Get user input
  var response = sketch.getSelectionFromUser('Select the artboard to link to:', artboardsList, 0)

  if (response[0] == 1000) {
    var i = response[1]
    var selectedArtboard = artboardsList[i]
    selection.iterate(function(item) {
      var itemId = item.id
      var itemArtboardId = getParentArtboardId (item.sketchObject)
      if (!config[itemArtboardId]) { config[itemArtboardId] = {} }
      if (!config[itemArtboardId][itemId]) { config[itemArtboardId][itemId] = {} }
      config[itemArtboardId][itemId][linkedLayerKey] = selectedArtboard
    })

    setConfig (page, config)
  }
}


/**
    COMMAND
    Fix selected layer to...  
  */

var setFixedLayer = function(context) {
  const sketch = context.api()
  const doc = sketch.selectedDocument
  const page = doc.selectedPage

  var selection = doc.selectedLayers

  var config = getConfigObject(sketch, page)

  if (selection.isEmpty) {
    sketch.message('Select a layer first')
    return false
  }

  // Get user input
  var response = sketch.getSelectionFromUser('Select the position to fix this layer to:', fixedPositions, 0)

  if (response[0] == 1000) {
    var i = response[1]
    var position = fixedPositions[i]

    selection.iterate(function(item) { 
      var itemId = item.id
      var itemArtboardId = getParentArtboardId (item.sketchObject)
      if (!config[itemArtboardId]) { config[itemArtboardId] = {} }
      if (!config[itemArtboardId][itemId]) { config[itemArtboardId][itemId] = {} }
      config[itemArtboardId][itemId][fixedLayerKey] = position
    })

    setConfig (page, config)
  }
}



/**
    COMMAND
    Clear selected layer's HTML
  */

var clearLayer = function(context) {
  const sketch = context.api()
  const doc = sketch.selectedDocument
  const page = doc.selectedPage

  var selection = doc.selectedLayers

  var config = getConfigObject(sketch, page)

  if (selection.isEmpty) {
    sketch.message('Select a layer first')
    return false
  }

  selection.iterate(function(item) {
    var itemId = item.id
    var itemArtboardId = getParentArtboardId (item.sketchObject)
    if (!config[itemArtboardId]) return false
    if (!config[itemArtboardId][itemId]) {
      return false
    } else {
      delete config[itemArtboardId][itemId]
      sketch.message('The HTML configuration was removed')
    }

  })

  setConfig (page, config)
}



/**
    COMMAND
    Clear current page
  */

var clearPage = function(context) {
  const sketch = context.api()
  const doc = sketch.selectedDocument
  const page = doc.selectedPage

  removeConfigText (sketch, page)
}


/**
    COMMAND
    Show HTML configuration
  */

var showHtmlConfigs = function(context) {
  const sketch = context.api()
  const doc = sketch.selectedDocument
  const page = doc.selectedPage
  var selection = doc.selectedLayers

  var itemArtboardId
  var config = getConfigObject(sketch, page)

  if (selection.isEmpty) {
    sketch.message('Select a layer or artboard first')
    return false
  }

  selection.iterate(function(item) {
    itemArtboardId = getParentArtboardId(item.sketchObject)
  })

  var output = ''

  var artboardConfig = config[itemArtboardId]
  if (artboardConfig) {
    var layersIds = Object.keys(artboardConfig)

    for (var layerId of layersIds) {
      var layer = doc.layerWithID(layerId)
      if (!layer) break
      output += layer.name + '\n'

      var layerConfig = artboardConfig[layerId]

      output += JSON.stringify(layerConfig) + '\n\n'
    }
  }

  if (output.length == 0) output = "Nothing set for this artboard"

  sketch.alert(output, "HTML Configurations")
  
}
