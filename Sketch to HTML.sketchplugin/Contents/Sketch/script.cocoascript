@import "library.js"
@import "html.js"

const linkLayerPrefix  = "[linkto:";
const fixedLayerPrefix = "[fixed:";
const fixedPositions   = ['top', 'right', 'bottom', 'left'];


/**
    COMMAND
    Export to HTML  
  */

var exportToHtml = function(context) {
  
  const sketch = context.api();
  const doc = sketch.selectedDocument;
  const docName = [(doc.sketchObject) displayName];

  // open the system dialog to choose the export location
  const fileURL = fileSaver();
  const exportPath = fileURL.path() + '/' + docName + '_HTML/';
  createFolder(exportPath);

  var html = '';
  var linkTargets = [];
  var artboardsList = getArtboardsList (doc);

  var artboards = (doc.sketchObject).currentPage().artboards().objectEnumerator();

  while (artboard = artboards.nextObject()) {

    var artboardName = artboard.name().trim();
    var artboardW = artboard.frame().width();

    // start the HTML string
    html = HTML_HEAD + '<!-- ' + artboardName + ' -->\n';
    html += '<img class="artboardImage" src="img/' + artboardName + '.png" width="'+ artboardW +'">\n';

    // check for fixed or linked layers
    var layers = artboard.children().objectEnumerator();

    while (layer = layers.nextObject()) {

      var name = layer.name();
      var layerId = layer.objectID();

      if (name === linkLayerPrefix || name.indexOf(linkLayerPrefix) !== -1) {

        var linkTarget = name.substring(name.lastIndexOf(linkLayerPrefix)+8,name.lastIndexOf("]"))
        linkTargets.push(linkTarget);
        html += getLinkedLayerHtml(layer, linkTarget);

      } else if (name === fixedLayerPrefix || name.indexOf(fixedLayerPrefix) !== -1) {
        var position = name.substring(name.lastIndexOf(fixedLayerPrefix)+7,name.lastIndexOf("]"))

        var filePath = exportPath + "img/" + layerId + ".png"
        exportLayerToPath((doc.sketchObject), layer, filePath);
        html += getFixedLayerHtml(layer, position);

        //hide layer until the artboard is exported
        [layer setIsVisible:false];
      }
    }

    html += HTML_FOOT;

    var htmlPath = exportPath + artboardName + '.html';
    saveTextToFile(htmlPath, html);

    // export this artboard
    var filePath = exportPath + "img/" + artboardName + ".png"
    exportLayerToPath((doc.sketchObject), artboard, filePath)

    // show fixed layers
    showFixedLayers (artboard)
  }

  // display list of dead links, if any
  displayMissingArtboardsWarnings(sketch, linkTargets, artboardsList);

  // display a toaster message
  sketch.message('HTML files exported to: ' + exportPath);

}


/**
    COMMAND
    Link fixed layer to...  
  */

var setLinkedLayer = function(context) {
  const sketch = context.api();
  const doc = sketch.selectedDocument;

  var selection = doc.selectedLayers;

  if (selection.isEmpty) {
    sketch.message('Select a layer first');
    return false;
  }

  var artboardsList = getArtboardsList (doc);

  // Get user input
  var response = sketch.getSelectionFromUser('Select the artboard to link to:', artboardsList, 0);

  if (response[0] == 1000) {
    var i = response[1];
    var selectedArtboard = artboardsList[i];
    selection.iterate(function(item) { 
      var currentName = item.name;

      // already linked?
      if (currentName === linkLayerPrefix || currentName.indexOf(linkLayerPrefix) !== -1) {
        var linkTarget = currentName.substring(currentName.lastIndexOf("linkto:")+7,currentName.lastIndexOf("]"));
        var newName = currentName.replace(linkTarget, selectedArtboard);
      } else {
        var newName = '[linkto:' + selectedArtboard + '] '+ currentName;
      }

      item.sketchObject.setName(newName);

    });
  }
}


/**
    COMMAND
    Fix selected layer to...  
  */

var setFixedLayer = function(context) {
  const sketch = context.api();
  const doc = sketch.selectedDocument;

  var selection = doc.selectedLayers;

  if (selection.isEmpty) {
    sketch.message('Select a layer first');
    return false;
  }

  // Get user input
  var response = sketch.getSelectionFromUser('Select the position to fix this layer to:', fixedPositions, 0);

  if (response[0] == 1000) {
    var i = response[1];
    var position = fixedPositions[i];
    selection.iterate(function(item) { 
      var currentName = item.name;

      // already fixed?
      if (currentName === fixedLayerPrefix || currentName.indexOf(fixedLayerPrefix) !== -1) {
        var fixedPosition = currentName.substring(currentName.lastIndexOf(fixedLayerPrefix)+8,currentName.lastIndexOf("]"));
        var newName = currentName.replace(fixedPosition, position);
      } else {
        var newName = fixedLayerPrefix + position + '] '+ currentName;
      }

      item.sketchObject.setName(newName);

    });
  }

}

